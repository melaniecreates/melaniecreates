'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layoutGenerator = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _breakjs = require('breakjs');

var _breakjs2 = _interopRequireDefault(_breakjs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var breakJsMethodMap = {
  is: 'is',
  isAtLeast: 'atLeast',
  isAtMost: 'atMost'
};

function getMethodFromLayout(layout, methodName) {
  return layout[breakJsMethodMap[methodName]];
}

var Break = _react2.default.createClass({
  displayName: 'Break',

  propTypes: {
    breakpoints: _react2.default.PropTypes.object.isRequired,
    children: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.arrayOf(_react2.default.PropTypes.node), _react2.default.PropTypes.node]),
    className: _react2.default.PropTypes.string,
    forceWrap: _react2.default.PropTypes.bool,
    query: _react2.default.PropTypes.shape({
      method: _react2.default.PropTypes.oneOf((0, _keys2.default)(breakJsMethodMap)),
      breakpoint: _react2.default.PropTypes.string.isRequired
    }),
    style: _react2.default.PropTypes.object
  },

  getInitialState: function getInitialState() {
    return { layout: (0, _breakjs2.default)(this.props.breakpoints) };
  },
  componentDidMount: function componentDidMount() {
    this.onBreakpointsChange();
  },
  componentWillUnmount: function componentWillUnmount() {
    this.state.layout.removeChangeListener(this.onLayoutChange);
  },
  onBreakpointsChange: function onBreakpointsChange() {
    this.setState({ layout: (0, _breakjs2.default)(this.props.breakpoints) });
    this.state.layout.removeChangeListener(this.onLayoutChange);
    this.state.layout.addChangeListener(this.onLayoutChange);
  },
  onLayoutChange: function onLayoutChange() {
    if (this.isMounted()) {
      this.forceUpdate();
    }
  },
  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var query = _props.query;
    var style = _props.style;
    var forceWrap = _props.forceWrap;
    var layout = this.state.layout;


    var breakpoint = query.breakpoint;

    if (!getMethodFromLayout(layout, query.method)(breakpoint)) {
      return null;
    }

    var classes = 'react-break react-break--' + query.method + '-' + query.breakpoint;
    var shouldBeWrapped = forceWrap || _react2.default.Children.count(children) > 1 || (typeof children === 'undefined' ? 'undefined' : (0, _typeof3.default)(children)) !== 'object';

    return shouldBeWrapped ? _react2.default.createElement(
      'div',
      { className: classes, style: style },
      children
    ) : children;
  }
});

var layoutGenerator = function componentGenerator(breakpoints) {
  function createComponent(method, breakpoint) {
    if (!(0, _keys2.default)(breakpoints).includes(breakpoint)) {
      throw new Error('Invalid breakpoint name \'' + breakpoint + '\'' + '(not defined in layout).');
    }

    return _react2.default.createClass({
      propTypes: {
        children: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.arrayOf(_react2.default.PropTypes.node), _react2.default.PropTypes.node])
      },

      render: function render() {
        var children = this.props.children;


        return children ? _react2.default.createElement(
          Break,
          (0, _extends3.default)({}, this.props, {
            breakpoints: breakpoints,
            query: { method: method, breakpoint: breakpoint } }),
          children
        ) : null;
      }
    });
  }

  return {
    is: function is(breakpoint) {
      return createComponent('is', breakpoint);
    },
    isAtLeast: function isAtLeast(breakpoint) {
      return createComponent('isAtLeast', breakpoint);
    },
    isAtMost: function isAtMost(breakpoint) {
      return createComponent('isAtMost', breakpoint);
    }
  };
};

exports.layoutGenerator = layoutGenerator;
exports.default = Break;